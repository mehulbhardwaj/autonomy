name: Release

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options: [patch, minor, major]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Bump version
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
        env:
          VERSION_TYPE: ${{ github.event.inputs.version_type }}
        run: |
          TYPE=${VERSION_TYPE:-patch}
          ./scripts/bump-version.sh "$TYPE"
          ./scripts/release-notes.sh
          git push --follow-tags
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: python -m pip install --upgrade build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine release type
        id: rtype
        run: |
          git fetch origin main testing
          if git merge-base --is-ancestor $GITHUB_SHA origin/testing; then
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          prerelease: ${{ steps.rtype.outputs.prerelease }}
          body_path: NEXT_RELEASE_NOTES.md
          generate_release_notes: true

  test-installation:
    needs: [build-and-publish]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Test clean installation
        run: |
          python -m pip install --upgrade pip
          python -m pip install autonomy
          python -c "import autonomy; print('Installation successful')"
      
      - name: Test CLI
        run: |
          python -m pip install autonomy
          autonomy --help
